<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\ch.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\ch.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Jul 23 16:06:22 2015
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; irq_storm_execute &rArr; chprintf &rArr; chvprintf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[14f]">__user_initial_stackheap</a>
 <LI><a href="#[73]">_port_exit_from_isr</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[76]">_idle_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">_idle_thread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">BusFault_Handler</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from cstartup.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from chcore_v7m.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[41]">Vector100</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[42]">Vector104</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[43]">Vector108</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[44]">Vector10C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[45]">Vector110</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[46]">Vector114</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[47]">Vector118</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[48]">Vector11C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[49]">Vector120</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[4a]">Vector124</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[4b]">Vector128</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[4c]">Vector12C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[4d]">Vector130</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[4e]">Vector134</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[4f]">Vector138</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[50]">Vector13C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[51]">Vector140</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[52]">Vector144</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[53]">Vector148</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[54]">Vector14C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[55]">Vector150</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[56]">Vector154</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[57]">Vector158</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[58]">Vector15C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[59]">Vector160</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[5a]">Vector164</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[5b]">Vector168</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[5c]">Vector16C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[5d]">Vector170</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[5e]">Vector174</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[5f]">Vector178</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[60]">Vector17C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[61]">Vector180</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[62]">Vector184</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[63]">Vector188</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[64]">Vector18C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[65]">Vector190</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[66]">Vector194</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[67]">Vector198</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[68]">Vector19C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[69]">Vector1A0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[6a]">Vector1A4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[6b]">Vector1A8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[6c]">Vector1AC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[6d]">Vector1B0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[6e]">Vector1B4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[6f]">Vector1B8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[70]">Vector1BC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[8]">Vector1C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[9]">Vector20</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[a]">Vector24</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[b]">Vector28</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[e]">Vector34</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[11]">Vector40</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[12]">Vector44</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[13]">Vector48</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[14]">Vector4C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[15]">Vector50</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[16]">Vector54</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[17]">Vector58</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[18]">Vector5C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[19]">Vector60</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1a]">Vector64</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1b]">Vector68</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1c]">Vector6C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1d]">Vector70</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1e]">Vector74</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1f]">Vector78</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[20]">Vector7C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[21]">Vector80</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[22]">Vector84</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[23]">Vector88</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[24]">Vector8C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[25]">Vector90</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[26]">Vector94</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[27]">Vector98</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[28]">Vector9C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[29]">VectorA0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2a]">VectorA4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2b]">VectorA8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2c]">VectorAC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2d]">VectorB0</a> from st_lld.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2e]">VectorB4</a> from gpt_lld.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2f]">VectorB8</a> from gpt_lld.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[30]">VectorBC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[31]">VectorC0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[32]">VectorC4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[33]">VectorC8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[34]">VectorCC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[35]">VectorD0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[36]">VectorD4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[37]">VectorD8</a> from serial_lld.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[38]">VectorDC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[39]">VectorE0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3a]">VectorE4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3b]">VectorE8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3c]">VectorEC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3d]">VectorF0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3e]">VectorF4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3f]">VectorF8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[40]">VectorFC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[88]">__main</a> from __main.o(!!!main) referenced from cstartup.o(.text)
 <LI><a href="#[76]">_idle_thread</a> from chsys.o(.text) referenced from chsys.o(.text)
 <LI><a href="#[73]">_port_exit_from_isr</a> from chcoreasm_v7m.o(.text) referenced from chcore_v7m.o(.text)
 <LI><a href="#[72]">_port_switch_from_isr</a> from chcoreasm_v7m.o(.text) referenced from chcore_v7m.o(.text)
 <LI><a href="#[77]">_port_thread_start</a> from chcoreasm_v7m.o(.text) referenced from chthreads.o(.text)
 <LI><a href="#[74]">chCoreAlloc</a> from chmemcore.o(.text) referenced from chheap.o(.text)
 <LI><a href="#[7d]">get</a> from serial.o(.text) referenced 2 times from serial.o(.constdata)
 <LI><a href="#[7f]">gett</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[82]">irq_storm_gpt1_cb</a> from irq_storm.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[83]">irq_storm_gpt2_cb</a> from irq_storm.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[79]">irq_storm_thread</a> from irq_storm.o(.text) referenced from irq_storm.o(.text)
 <LI><a href="#[78]">notify2</a> from serial_lld.o(.text) referenced from serial_lld.o(.text)
 <LI><a href="#[7c]">put</a> from serial.o(.text) referenced 2 times from serial.o(.constdata)
 <LI><a href="#[7e]">putt</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[7b]">read</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[85]">reads</a> from memstreams.o(.text) referenced from memstreams.o(.constdata)
 <LI><a href="#[81]">readt</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[75]">wakeup</a> from chschd.o(.text) referenced from chschd.o(.text)
 <LI><a href="#[7a]">write</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[84]">writes</a> from memstreams.o(.text) referenced from memstreams.o(.constdata)
 <LI><a href="#[80]">writet</a> from serial.o(.text) referenced from serial.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[88]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[89]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[90]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[132]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[133]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[134]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[135]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[136]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[137]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[138]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[139]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[140]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[141]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[142]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[143]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[144]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[145]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[8a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[14b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[8f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[91]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; irq_storm_execute &rArr; chprintf &rArr; chvprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[12d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[94]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[14e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[96]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[98]"></a>__early_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[11d]"></a>boardInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Vector100</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>Vector104</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>Vector108</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>Vector10C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>Vector110</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>Vector114</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>Vector118</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>Vector11C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Vector120</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Vector124</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Vector128</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Vector12C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Vector130</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Vector134</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Vector138</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Vector13C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Vector140</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Vector144</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>Vector148</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Vector14C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>Vector150</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>Vector154</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>Vector158</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>Vector15C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Vector160</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Vector164</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>Vector168</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Vector16C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Vector170</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Vector174</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>Vector178</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Vector17C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Vector180</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>Vector184</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Vector188</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Vector18C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Vector190</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Vector194</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Vector198</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>Vector19C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Vector1A0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Vector1A4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Vector1A8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>Vector1AC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Vector1B0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Vector1B4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>Vector1B8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>Vector1BC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>Vector1C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Vector20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Vector24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Vector28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Vector34</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Vector40</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Vector44</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Vector48</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Vector4C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Vector50</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Vector54</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Vector58</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Vector5C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Vector60</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Vector64</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Vector68</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Vector6C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Vector70</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Vector74</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Vector78</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Vector7C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Vector80</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Vector84</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Vector88</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Vector8C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Vector90</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Vector94</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Vector98</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Vector9C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>VectorA0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>VectorA4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>VectorA8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>VectorAC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>VectorBC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>VectorC0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>VectorC4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>VectorC8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>VectorCC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>VectorD0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>VectorD4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>VectorDC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>VectorE0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>VectorE4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>VectorE8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>VectorEC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>VectorF0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>VectorF4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>VectorF8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>VectorFC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>_unhandled_exception</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unhandled_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unhandled_exception
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__early_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cstartup.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, chcore_v7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>_port_irq_epilogue</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, chcore_v7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _port_irq_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchIsPreemptionRequired
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorB0
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorD8
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorB8
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorB4
</UL>

<P><STRONG><a name="[df]"></a>_port_switch</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chcoreasm_v7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoReschedule
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoRescheduleBehind
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoRescheduleAhead
</UL>

<P><STRONG><a name="[77]"></a>_port_thread_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chcoreasm_v7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _port_thread_start &rArr; chThdExit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chthreads.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>_port_switch_from_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chcoreasm_v7m.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoReschedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chcore_v7m.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>_port_exit_from_isr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, chcoreasm_v7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> chcore_v7m.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>_vt_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, chvt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[9f]"></a>chVTDoSetI</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, chvt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stStartAlarm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stSetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[a2]"></a>chVTDoResetI</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, chvt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chVTDoResetI
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stStopAlarm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stSetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[150]"></a>chThdAddRef</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chdynamic.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>chThdRelease</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, chdynamic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chThdRelease &rArr; chHeapFree &rArr; chMtxLock &rArr; chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolFree
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapFree
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdWait
</UL>

<P><STRONG><a name="[a7]"></a>chThdCreateFromHeap</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, chdynamic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapAlloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>

<P><STRONG><a name="[ab]"></a>chThdCreateFromMemoryPool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, chdynamic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateI
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolAlloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>

<P><STRONG><a name="[151]"></a>chEvtRegisterMaskWithFlags</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>chEvtUnregister</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>chEvtGetAndClearEvents</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>chEvtAddEvents</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>chEvtSignalI</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[af]"></a>chEvtBroadcastFlagsI</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chEvtBroadcastFlagsI
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorD8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdRequestDataI
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdIncomingDataI
</UL>

<P><STRONG><a name="[155]"></a>chEvtGetAndClearFlags</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>chEvtSignal</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[b2]"></a>chEvtBroadcastFlags</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[156]"></a>chEvtGetAndClearFlagsI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>chEvtDispatch</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>chEvtWaitOne</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[b5]"></a>chEvtWaitAny</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[b6]"></a>chEvtWaitAll</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[b7]"></a>chEvtWaitOneTimeout</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[b9]"></a>chEvtWaitAnyTimeout</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[ba]"></a>chEvtWaitAllTimeout</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[bb]"></a>_heap_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chheap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[bd]"></a>chHeapObjectInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxObjectInit
</UL>

<P><STRONG><a name="[a8]"></a>chHeapAlloc</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, chheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromHeap
</UL>

<P><STRONG><a name="[a6]"></a>chHeapFree</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, chheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chHeapFree &rArr; chMtxLock &rArr; chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdRelease
</UL>

<P><STRONG><a name="[c0]"></a>chHeapStatus</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, chheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>

<P><STRONG><a name="[c1]"></a>chMBObjectInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMBObjectInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[c3]"></a>chMBResetI</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemResetI
</UL>

<P><STRONG><a name="[c5]"></a>chMBReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemResetI
</UL>

<P><STRONG><a name="[c6]"></a>chMBPostS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>

<P><STRONG><a name="[c9]"></a>chMBPost</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = chMBPost &rArr; chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_thread
</UL>

<P><STRONG><a name="[ca]"></a>chMBPostI</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMBPostI
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_gpt2_cb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_gpt1_cb
</UL>

<P><STRONG><a name="[cb]"></a>chMBPostAheadS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>

<P><STRONG><a name="[cc]"></a>chMBPostAhead</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>

<P><STRONG><a name="[cd]"></a>chMBPostAheadI</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>

<P><STRONG><a name="[ce]"></a>chMBFetchS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>

<P><STRONG><a name="[cf]"></a>chMBFetch</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = chMBFetch &rArr; chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_thread
</UL>

<P><STRONG><a name="[d0]"></a>chMBFetchI</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>

<P><STRONG><a name="[ed]"></a>_core_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chmemcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[158]"></a>chCoreAllocI</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chmemcore.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>chCoreAlloc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, chmemcore.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> chheap.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>chCoreGetStatusX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chmemcore.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>chPoolObjectInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chmempools.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>chPoolFreeI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chmempools.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>chPoolFree</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chmempools.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdRelease
</UL>

<P><STRONG><a name="[15c]"></a>chPoolLoadArray</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, chmempools.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>chPoolAllocI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, chmempools.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>chPoolAlloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chmempools.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromMemoryPool
</UL>

<P><STRONG><a name="[bc]"></a>chMtxObjectInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chmtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapObjectInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_init
</UL>

<P><STRONG><a name="[d1]"></a>chMtxLockS</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, chmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>

<P><STRONG><a name="[be]"></a>chMtxLock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, chmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chMtxLock &rArr; chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapFree
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapAlloc
</UL>

<P><STRONG><a name="[15e]"></a>chMtxTryLockS</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, chmtx.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>chMtxTryLock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, chmtx.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>chMtxUnlock</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, chmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapFree
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapAlloc
</UL>

<P><STRONG><a name="[d2]"></a>chMtxUnlockS</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, chmtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[d3]"></a>chMtxUnlockAll</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, chmtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[102]"></a>chIQObjectInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chIQObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdObjectInit
</UL>

<P><STRONG><a name="[d4]"></a>chIQResetI</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, chqueues.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueAllI
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStop
</UL>

<P><STRONG><a name="[d6]"></a>chIQPutI</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chIQPutI
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueNextI
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdIncomingDataI
</UL>

<P><STRONG><a name="[d8]"></a>chIQGetTimeout</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = chIQGetTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gett
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get
</UL>

<P><STRONG><a name="[da]"></a>chIQReadTimeout</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = chIQReadTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[103]"></a>chOQObjectInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chqueues.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdObjectInit
</UL>

<P><STRONG><a name="[db]"></a>chOQResetI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chqueues.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueAllI
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStop
</UL>

<P><STRONG><a name="[dc]"></a>chOQPutTimeout</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chOQPutTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put
</UL>

<P><STRONG><a name="[dd]"></a>chOQGetI</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chOQGetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueNextI
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorD8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdRequestDataI
</UL>

<P><STRONG><a name="[de]"></a>chOQWriteTimeout</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = chOQWriteTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[ea]"></a>_scheduler_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[ae]"></a>chSchReadyI</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlags
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignalI
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockS
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalWait
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemAddCounterI
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemReset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueNextI
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdDequeueAllI
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockAll
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemResetI
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdResumeI
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExitS
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdStart
</UL>

<P><STRONG><a name="[b4]"></a>chSchGoSleepS</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAll
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAny
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitOne
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalWait
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSuspendS
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdWait
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExitS
</UL>

<P><STRONG><a name="[b8]"></a>chSchGoSleepTimeoutS</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, chschd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoResetI
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoSetI
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAllTimeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAnyTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitOneTimeout
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdEnqueueTimeoutS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSuspendTimeoutS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleepUntilWindowed
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleepUntil
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
</UL>

<P><STRONG><a name="[aa]"></a>chSchWakeupS</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, chschd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromMemoryPool
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromHeap
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdResume
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdResumeS
</UL>

<P><STRONG><a name="[e0]"></a>chSchDoRescheduleAhead</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, chschd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>

<P><STRONG><a name="[b1]"></a>chSchRescheduleS</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, chschd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSchRescheduleS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlags
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysRestoreStatusX
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalWait
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemReset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockAll
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAhead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadS
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPost
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostS
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSetPriority
</UL>

<P><STRONG><a name="[9c]"></a>chSchIsPreemptionRequired</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>

<P><STRONG><a name="[e1]"></a>chSchDoRescheduleBehind</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, chschd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdYield
</UL>

<P><STRONG><a name="[9e]"></a>chSchDoReschedule</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch_from_isr
</UL>

<P><STRONG><a name="[c2]"></a>chSemObjectInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chsem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBObjectInit
</UL>

<P><STRONG><a name="[c4]"></a>chSemResetI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBReset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBResetI
</UL>

<P><STRONG><a name="[e2]"></a>chSemReset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[e3]"></a>chSemWaitS</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[e4]"></a>chSemWait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[c7]"></a>chSemWaitTimeoutS</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAhead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadS
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPost
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostS
</UL>

<P><STRONG><a name="[e5]"></a>chSemWaitTimeout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[e6]"></a>chSemSignal</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>

<P><STRONG><a name="[c8]"></a>chSemSignalI</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, chsem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchI
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadI
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAhead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadS
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostI
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPost
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostS
</UL>

<P><STRONG><a name="[e7]"></a>chSemAddCounterI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[e8]"></a>chSemSignalWait</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[e9]"></a>chSysInit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, chsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chSysInit &rArr; chThdCreateStatic &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vt_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>chSysHalt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chsys.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>chSysIntegrityCheckI</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, chsys.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>chSysTimerHandlerI</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, chsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chSysTimerHandlerI
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stStopAlarm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stSetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorB0
</UL>

<P><STRONG><a name="[162]"></a>chSysGetStatusAndLockX</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chsys.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>chSysRestoreStatusX</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chsys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>

<P><STRONG><a name="[163]"></a>chSysIsCounterWithinX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chsys.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>chSysPolledDelayX</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chsys.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>_thread_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, chthreads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[a9]"></a>chThdCreateI</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromMemoryPool
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromHeap
</UL>

<P><STRONG><a name="[ef]"></a>chThdCreateStatic</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chThdCreateStatic &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[f2]"></a>chThdStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[f3]"></a>chThdSetPriority</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>

<P><STRONG><a name="[127]"></a>chThdTerminate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, chthreads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[f4]"></a>chThdSleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chThdSleep &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>chThdSleepUntil</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[f6]"></a>chThdSleepUntilWindowed</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[f7]"></a>chThdYield</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoRescheduleBehind
</UL>

<P><STRONG><a name="[f8]"></a>chThdExitS</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[9d]"></a>chThdExit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chThdExit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_thread_start
</UL>

<P><STRONG><a name="[f9]"></a>chThdWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxLock &rArr; chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdRelease
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[fa]"></a>chThdSuspendS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[fb]"></a>chThdSuspendTimeoutS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>

<P><STRONG><a name="[fc]"></a>chThdResumeI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[fd]"></a>chThdResumeS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>

<P><STRONG><a name="[fe]"></a>chThdResume</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>

<P><STRONG><a name="[d9]"></a>chThdEnqueueTimeoutS</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQWriteTimeout
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQPutTimeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQReadTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
</UL>

<P><STRONG><a name="[d7]"></a>chThdDequeueNextI</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chthreads.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQGetI
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQPutI
</UL>

<P><STRONG><a name="[d5]"></a>chThdDequeueAllI</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQResetI
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQResetI
</UL>

<P><STRONG><a name="[165]"></a>chTMStopMeasurementX</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, chtm.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>chTMStartMeasurementX</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chtm.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>chTMObjectInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chtm.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_tm_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chtm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[168]"></a>chTMChainMeasurementToX</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, chtm.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>sdInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdInit &rArr; sd_lld_init &rArr; sdObjectInit &rArr; chIQObjectInit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[101]"></a>sdObjectInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sdObjectInit &rArr; chIQObjectInit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQObjectInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_init
</UL>

<P><STRONG><a name="[104]"></a>sdStart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdStart &rArr; sd_lld_start
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_start
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>sdStop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQResetI
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQResetI
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_stop
</UL>

<P><STRONG><a name="[108]"></a>sdIncomingDataI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdIncomingDataI &rArr; chEvtBroadcastFlagsI
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQPutI
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorD8
</UL>

<P><STRONG><a name="[109]"></a>sdRequestDataI</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQGetI
</UL>

<P><STRONG><a name="[10a]"></a>gptInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gptInit &rArr; gpt_lld_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[120]"></a>gptObjectInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_init
</UL>

<P><STRONG><a name="[10c]"></a>gptStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gptStart &rArr; gpt_lld_start
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_start
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[10e]"></a>gptStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_stop
</UL>

<P><STRONG><a name="[169]"></a>gptChangeInterval</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpt.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>gptStartContinuousI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_start_timer
</UL>

<P><STRONG><a name="[112]"></a>gptStartContinuous</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gptStartContinuous
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[113]"></a>gptStartOneShotI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_start_timer
</UL>

<P><STRONG><a name="[114]"></a>gptStartOneShot</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_start_timer
</UL>

<P><STRONG><a name="[115]"></a>gptStopTimerI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_stop_timer
</UL>

<P><STRONG><a name="[117]"></a>gptStopTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gptStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[118]"></a>gptPolledDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_polled_delay
</UL>

<P><STRONG><a name="[11a]"></a>halInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = halInit &rArr; sdInit &rArr; sd_lld_init &rArr; sdObjectInit &rArr; chIQObjectInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pal_lld_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>stInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[a0]"></a>stStartAlarm</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoSetI
</UL>

<P><STRONG><a name="[a3]"></a>stStopAlarm</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, st.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoResetI
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysTimerHandlerI
</UL>

<P><STRONG><a name="[a1]"></a>stSetAlarm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoResetI
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTDoSetI
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysTimerHandlerI
</UL>

<P><STRONG><a name="[16a]"></a>stGetAlarm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>hal_lld_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, hal_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[99]"></a>stm32_clock_init</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, hal_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__early_init
</UL>

<P><STRONG><a name="[11c]"></a>_pal_lld_init</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, pal_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[123]"></a>_pal_lld_setgroupmode</STRONG> (Thumb, 172 bytes, Stack size 36 bytes, pal_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pal_lld_setgroupmode
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>gpt_lld_stop_timer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpt_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStopTimer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStopTimerI
</UL>

<P><STRONG><a name="[2e]"></a>VectorB4</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gpt_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VectorB4 &rArr; _port_irq_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>VectorB8</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gpt_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VectorB8 &rArr; _port_irq_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>gpt_lld_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpt_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpt_lld_init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptInit
</UL>

<P><STRONG><a name="[10d]"></a>gpt_lld_start</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, gpt_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpt_lld_start
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicEnableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStart
</UL>

<P><STRONG><a name="[10f]"></a>gpt_lld_stop</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gpt_lld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicDisableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStop
</UL>

<P><STRONG><a name="[111]"></a>gpt_lld_start_timer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gpt_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStartOneShot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStartOneShotI
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStartContinuous
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStartContinuousI
</UL>

<P><STRONG><a name="[119]"></a>gpt_lld_polled_delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpt_lld.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptPolledDelay
</UL>

<P><STRONG><a name="[37]"></a>VectorD8</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, serial_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VectorD8 &rArr; sdIncomingDataI &rArr; chEvtBroadcastFlagsI
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQGetI
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdIncomingDataI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>sd_lld_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sd_lld_init &rArr; sdObjectInit &rArr; chIQObjectInit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
</UL>

<P><STRONG><a name="[105]"></a>sd_lld_start</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, serial_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_lld_start
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicEnableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStart
</UL>

<P><STRONG><a name="[107]"></a>sd_lld_stop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, serial_lld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicDisableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStop
</UL>

<P><STRONG><a name="[2d]"></a>VectorB0</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, st_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VectorB0 &rArr; chSysTimerHandlerI
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysTimerHandlerI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>st_lld_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, st_lld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicEnableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stInit
</UL>

<P><STRONG><a name="[121]"></a>nvicEnableVector</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_lld_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_start
</UL>

<P><STRONG><a name="[122]"></a>nvicDisableVector</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nvic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_lld_stop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_stop
</UL>

<P><STRONG><a name="[16b]"></a>nvicSetSystemHandlerPriority</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>nvicClearPending</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main &rArr; irq_storm_execute &rArr; chprintf &rArr; chvprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pal_lld_setgroupmode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[82]"></a>irq_storm_gpt1_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, irq_storm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = irq_storm_gpt1_cb &rArr; chMBPostI
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>irq_storm_gpt2_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, irq_storm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = irq_storm_gpt2_cb &rArr; chMBPostI
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>irq_storm_execute</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, irq_storm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = irq_storm_execute &rArr; chprintf &rArr; chvprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBObjectInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chvprintf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chprintf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStopTimer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStartContinuous
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gptStart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdWait
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>chvprintf</STRONG> (Thumb, 718 bytes, Stack size 48 bytes, chprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chsnprintf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chprintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[128]"></a>chsnprintf</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, chprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msObjectInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chvprintf
</UL>

<P><STRONG><a name="[129]"></a>msObjectInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memstreams.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chsnprintf
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reads
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writes
</UL>

<P><STRONG><a name="[12b]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[16d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[97]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[174]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[177]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[178]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[75]"></a>wakeup</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, chschd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> chschd.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>_idle_thread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chsys.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idle_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idle_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chsys.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write &rArr; chOQWriteTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQWriteTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read &rArr; chIQReadTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQReadTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>put</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put &rArr; chOQPutTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQPutTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get &rArr; chIQGetTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>putt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = putt &rArr; chOQPutTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQPutTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>gett</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gett &rArr; chIQGetTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>writet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = writet &rArr; chOQWriteTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQWriteTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>readt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = readt &rArr; chIQReadTimeout &rArr; chThdEnqueueTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQReadTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>notify2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_lld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> serial_lld.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>irq_storm_thread</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, irq_storm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = irq_storm_thread &rArr; chMBFetch &rArr; chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS &rArr; chVTDoSetI
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetch
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irq_storm.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>chprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, irq_storm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = chprintf &rArr; chvprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_storm_execute
</UL>

<P><STRONG><a name="[84]"></a>writes</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, memstreams.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writes
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memstreams.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>reads</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, memstreams.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reads
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memstreams.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memstreams.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> memstreams.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memstreams.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> memstreams.o(.constdata)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
